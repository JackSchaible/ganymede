// Flexbox Mixins
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox
//
// Copyright (c) 2013 Brian Franco
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// This is a set of mixins for those who want to mess around with flexbox
// using the native support of current browsers. For full support table
// check: http://caniuse.com/flexbox
//
// Basically this will use:
//
// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
//
// This was inspired by:
//
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
//
// With help from:
//
// * http://w3.org/tr/css3-flexbox/
// * http://the-echoplex.net/flexyboxes/
// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
// * http://css-tricks.com/using-flexbox/
// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes
//----------------------------------------------------------------------
// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)
@mixin flexbox($force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  display: -webkit-box $force;
  display: -webkit-flex $force;
  display: -ms-flexbox $force;
  display: flex $force;
}

%flexbox {
  @include flexbox;
}

//----------------------------------
@mixin inline-flex($force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  display: -webkit-inline-box $force;
  display: -webkit-inline-flex $force;
  display: -ms-inline-flexbox $force;
  display: inline-flex $force;
}

%inline-flex {
  @include inline-flex;
}

//----------------------------------------------------------------------
// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property
@mixin flex-direction($value: row, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  @if $value==row-reverse {
    -webkit-box-direction: reverse $force;
    -webkit-box-orient: horizontal $force;
  } @else if $value==column {
    -webkit-box-direction: normal $force;
    -webkit-box-orient: vertical $force;
  } @else if $value==column-reverse {
    -webkit-box-direction: reverse $force;
    -webkit-box-orient: vertical $force;
  } @else {
    -webkit-box-direction: normal $force;
    -webkit-box-orient: horizontal $force;
  }
  -webkit-flex-direction: $value $force;
  -ms-flex-direction: $value $force;
  flex-direction: $value $force;
}

// Shorter version:
@mixin flex-dir($args...) {
  @include flex-direction($args...);
}

//----------------------------------------------------------------------
// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property
@mixin flex-wrap($value: nowrap, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value $force;
  @if $value==nowrap {
    -ms-flex-wrap: none $force;
  } @else {
    -ms-flex-wrap: $value $force;
  }
  flex-wrap: $value $force;
}

//----------------------------------------------------------------------
// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property
@mixin flex-flow(
  $values: (
    row nowrap
  ),
  $force: false
) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  // No Webkit Box fallback.
  -webkit-flex-flow: $values $force;
  -ms-flex-flow: $values $force;
  flex-flow: $values $force;
}

//----------------------------------------------------------------------
// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property
@mixin order($int: 0, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  -webkit-box-ordinal-group: ($int + 1) $force;
  -webkit-order: $int $force;
  -ms-flex-order: $int $force;
  order: $int $force;
}

//----------------------------------------------------------------------
// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property
@mixin flex-grow($int: 0, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  -webkit-box-flex: $int $force;
  -webkit-flex-grow: $int $force;
  -ms-flex-positive: $int $force;
  flex-grow: $int $force;
}

//----------------------------------------------------------------------
// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property
@mixin flex-shrink($int: 1, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  -webkit-flex-shrink: $int $force;
  -ms-flex-negative: $int $force;
  flex-shrink: $int $force;
}

//----------------------------------------------------------------------
// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property
@mixin flex-basis($value: auto, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  -webkit-flex-basis: $value $force;
  -ms-flex-preferred-size: $value $force;
  flex-basis: $value $force;
}

//----------------------------------------------------------------------
// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property
@mixin flex($fg: 1, $fs: null, $fb: null, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;
  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == "list" {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg-boxflex $force;
  -webkit-flex: $fg $fs $fb $force;
  -ms-flex: $fg $fs $fb $force;
  flex: $fg $fs $fb $force;
}

//----------------------------------------------------------------------
// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property
@mixin justify-content($value: flex-start, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  @if $value==flex-start {
    -webkit-box-pack: start $force;
    -ms-flex-pack: start $force;
  } @else if $value==flex-end {
    -webkit-box-pack: end $force;
    -ms-flex-pack: end $force;
  } @else if $value==space-between {
    -webkit-box-pack: justify $force;
    -ms-flex-pack: justify $force;
  } @else if $value==space-around {
    -ms-flex-pack: distribute $force;
  } @else {
    -webkit-box-pack: $value $force;
    -ms-flex-pack: $value $force;
  }
  -webkit-justify-content: $value $force;
  justify-content: $value $force;
}

// Shorter version:
@mixin flex-just($args...) {
  @include justify-content($args...);
}

//----------------------------------------------------------------------
// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property
@mixin align-items($value: stretch, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  @if $value==flex-start {
    -webkit-box-align: start $force;
    -ms-flex-align: start $force;
  } @else if $value==flex-end {
    -webkit-box-align: end $force;
    -ms-flex-align: end $force;
  } @else {
    -webkit-box-align: $value $force;
    -ms-flex-align: $value $force;
  }
  -webkit-align-items: $value $force;
  align-items: $value $force;
}

//----------------------------------
// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
@mixin align-self($value: auto, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  // No Webkit Box Fallback.
  -webkit-align-self: $value $force;
  @if $value==flex-start {
    -ms-flex-item-align: start $force;
  } @else if $value==flex-end {
    -ms-flex-item-align: end $force;
  } @else {
    -ms-flex-item-align: $value $force;
  }
  align-self: $value $force;
}

//----------------------------------------------------------------------
// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property
@mixin align-content($value: stretch, $force: false) {
  //add !important if $force is passed as true
  @if $force {
    $force: !important;
  } @else {
    $force: null;
  }
  // No Webkit Box Fallback.
  -webkit-align-content: $value $force;
  @if $value==flex-start {
    -ms-flex-line-pack: start $force;
  } @else if $value==flex-end {
    -ms-flex-line-pack: end $force;
  } @else {
    -ms-flex-line-pack: $value $force;
  }
  align-content: $value $force;
}
